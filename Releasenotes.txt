Shell

Release notes

Latest version: ShellCore 7.0.40
***SHELL DOCUMENTATION IS COMING SOON!***
DEVELOPMENT RELEASE 1 / ShellCore 7.0.40 / ShellUI 0.6.51 / Shell 0.2.66
7.0 has a LOT of changes, so here they are (as of 7.0.29)
MORE STUFF WILL BE CHANGED!
+ Modified BaseMath():
* Now uses a double instead of an int
* Replaced And, Or, and Xor with Sin, Cos, and Tan
* Replaced operationId with an enum, BaseMathOperation, with 12 values:
public enum BaseMathOperation { Add=0, Subtract=1, Multiply=2, Divide=3, Modulus=4, Sqrt=5, Sin=6, Cos=7, Tan=8, Asin=9, Acos=10, Atan=11 }
+ Added Asin, Acos, and Atan.
+ Added ShellCore method public List<double> Ratio(double n, double x, double y) to calculate a ratio. Returns a list with the quotients.
* Renamed Pow(int x, int y) to Power(int x, int y)
* Merged Sin(), Cos(), and Tan() into BaseMath()
* Added error checking to ShellUI console-related functions
* Added additional error checking to BaseMath
+ Added ShellCore methods *The registry API is not complete yet.*
	public bool WinCreateRegKey(RegistryHive root, string thePath, bool writable = true) - Creates a registry key. Returns true if successful
	public bool WinCreateRegKey(RegistryKey root, string theName, bool writable = true) - Creates a subkey. Returns true if successful.
	public bool WinDeleteRegKey(RegistryHive root, string thePath) - Deletes a registry key. Returns true if successful
	public bool WinDeleteRegKey(RegistryKey key, string theName, bool deltree = false) - Deletes a subkey, and optionally its entire key tree.
	public RegistryKey WinOpenRegKey(RegistryHive root, string thePath, bool writable = true)
	public RegistryKey WinOpenRegKey(RegistryKey key, string theName, bool writable = true) - Opens a subkey. 
	public object WinGetRegValue(string keyPath, string valuePath, object defaultValue) - Gets a registry value. Use var.
	public bool WinSetRegValue(string keyPath, string valuePath, object value, RegistryValueKind type) - Sets a registry value.
	public bool WinDeleteRegValue(RegistryKey theKey, string valueName) - Deletes a registry value. 
	public string[] WinListSubkeys(RegistryKey theKey, string valueName) - Returns a string array holding the children of a key.
	public bool SetFileAttributeEx(string filePath, FileAttributes attribute) - Sets a file attribute to FileAttributes, with error protection.
	public bool SetFileHiddenEx(string filePath) - Alias for SetFileAttributeEx(filePath, FileAttributes.Hidden);
	public bool SetFileReadOnlyEx(string filePath) - Alias for SetFileAttributeEx(filePath, FileAttributes.ReadOnly);
	public bool SetFileTemporaryEx(string filePath) - Alias for SetFileAttributeEx(filePath, FileAttributes.Temporary);
	public bool SetFileSystemEx(string filePath) - Alias for SetFileAttributeEx(filePath, FileAttributes.System);
	public bool RemoveAttributesEx(string filePath) - Alias for SetFileAttributeEx(string filePath, FileAttributes attribute);
+ Added error checking to <Op> handling in ShellUI
+ Modified <Op> handling
+ Made <Op> attributes more flexible - op, Op, operation, and Operation are all accepted instead of just op, and var, Var, variable, and Variable are all accepted instead of just 
- Rewrote GetVersion() and PrintVersion() in both DLLs to get the actual file version instead of a hard-coded value.
+ Added ShellUI Core methods
	public void UiSetWindowTitle(string title)
+ Fixed compile warning
+ Added if statements (crappy)
+ Added easier to use overload for BaseMath - public double BaseMath(BaseMathOperation operationId, double num, double num2) - harder to use one remains and is recommended. 
* Modified messages when booting Shell.
+ Updated the Test Application to require less user input. It requires build 26 or later.
+ Probably stuff I forgot about
Version 7.0.15 Alpha / ShellUI 0.5.20 Alpha / Shell 0.2.18 Alpha
****THIS IS AN UNFINISHED VERSION OF SHELLCORE AND SHELLUI****
+ Added Registry functions for ShellCore (UNTESTED AS OF NOW, USE ONLY IF EXPERIMENTING)
	WinCreateRegKey(int root, string thePath)
	public bool WinDeleteRegKey(int root, string thePath)
	public object WinGetRegValue(string keyPath, string valuePath, object defaultValue)
	public bool WinSetRegValue(string keyPath, string valuePath, object value, RegistryValueKind type)
THIS SECTION OF THE API IS NOT COMPLETE, AND MORE WILL BE ADDED.
+ Rewrote GetVersion() and PrintVersion() to get the actual version 
+ Modified <Op> handling code and added error checking
+ Changed versioning system - now auto-increments build number on compile.
* There IS unused code for handling if statements, but that is not in yet and has been disabled for this release.
- Removed unused code from a very early implementation of ShellXML

Version 6.0 / ShellUI 0.5.5
- Rewrote <Output> parsing to be not shit...again.
- Added new Windows Forms API functions!
	public Color WinColourDialog()
	public void WinMsgBox(string caption = null, string text = null, MessageBoxButtons msgButtons = MessageBoxButtons.OK, MessageBoxIcon msgIcon = MessageBoxIcon.None)
	public string WinOpenDialog(string defaultFileName, string defaultExtension, string filter, string title = null, bool checkPathExists = false, bool allowMultipleFiles = false)
	public string WinSaveDialog(string defaultFileName, string defaultExtension, string filter, string title = null, bool checkPathExists = false, bool allowMultipleFiles = false)
- Added new System functions
	public void ShlWriteLog(string path, string text)
	public void ShlCloseLog()
	public void ShlBeep(Nullable<int> frequency = null, Nullable<int> length = null)
- Fixed a bug in CopyFileEx and MoveFileEx
- Errors in FileIO functions trigger exceptions 29 to 32 instead of silently returning
- Enhanced Exit()
- Lowercase node names are now accepted

- Added ShellUI non-scripting functions:
	public void UiSetCursorSize(int height)
	public void UiSetCursorVisibility(bool visible)
	public void UiSetWindowPosition(int x, int y)
- Added superglobals - variables available to all ShellXML scripts
- Added ShellUI superglobal related functions:
	public void InitSuperglobals()
- Added superglobals
	- ShellCoreVer - the version of shellcore
	- ShellUIVer - the version of shellui


Version 5.7.0 / ShellUI 0.5.3
- <Function> element. It supports functions, run in a separate file. No need to declare anything!
- Made ShellUI act less retarded
- Updated Shl.exe to 0.2.8, so now it uses the new way ShellUI works
- Added ShellCore and ShellUI functions
	public void PrintVersion()

Version 5.6.2 / ShellUI 0.5.2
- <Output> can now use the + operator.
- Added public void ShlSetWindowTitle(string WindowTitle)

Version 5.6.2 / ShellUI 0.5.1
- <Op> now works with variables (adding numbers and variables only kinda works for some reason)
- Added modulus to <Op>
- The testing application has been updated to version 1.7 and will not launch if the version of shellcore is lower than 5.5.

Version 5.6.2 / ShellUI 0.5.0
- Added Argument support to Shl.exe (0.2.7) and ShellCore (5.6.2) - run Shl.exe with a path to a ShellXML file to make shell parse that file. Also shellcore will do this
- Added <Op> parsing - add, subtract, multiply, divide. Next version: modulus, sine, cosine, tangent, and variables. (double or int only).
- Added delegates
- Split ShxmlDeclareVariable() into ShxmlInitVariable(), which initalizes and creates the variable itself, and ShxmlDeclareVariable(), which performs the preprocessing of the <Var> node. ShxmlInitVariable() can be called from anywhere now (Architectural improvement). ShxmlDeclareVariable no longer registers the variables and now calls one of the six overload functons of ShxmlInitVariable. Other functions in ShellUI will call ShxmlInitVariable instead of registering variables themselves in later versions.

ShellUI.ShellXML.ShxmlInitVariable overloads:
public ShxmlVariable ShxmlInitVariable(string Name, int value) // For ints
public ShxmlVariable ShxmlInitVariable(string Name, string value) // For strings
public ShxmlVariable ShxmlInitVariable(string Name, char value) // For chars
public ShxmlVariable ShxmlInitVariable(string Name, double value) // For doubles
public ShxmlVariable ShxmlInitVariable(string Name, float value) // For floats
public ShxmlVariable ShxmlInitVariable(string Name, bool value) // For bools


Version 5.5.1 / ShellUI 0.4.23
- Added <Input>
- Almost finished operations
- <Input> element parsing works
- Fixed compile warnings
- <Output> can now print variables (only 1)

Version 5.5 / ShellUI 0.4.8
- Added ShellUI Core functions
	public void UiSetCursorPosition(int x, int y)
- Variable parsing works
- Unfinished operation parsing, do not use
- <Output> element parsing works and can print at any point on the screen.

Version 5.5 / ShellUI 0.4.1

- Changed all functions using arrays to use collections - int[] is now List<int>, etc. 
- Fixed bug in ExecuteFileEx
- Updated test application to Version 1.6 to reflect the changes in ShellCore and ShellUI Version 5.5
- Fixed variable parsing bugs
- Removed extraneous loops in shellui 


Version 5.0 / ShellUI 0.4.0
- Added System functions
	public void ExecuteFileEx(string executePath, string[] arg)
	public void ShlPowerControl(string[] arg)
- Prepared for major changes (collections of strings instead of arrays of strings in v5.5)

Version 4.3
- More exceptions
- Moved GetVersion to system
- Added internal function
	internal int ShlHardError(string Message, int errorCode)

Version 4.2
- Added Test Application
- Fixed bug in ElmInitExceptionsManager()
- Changed ElmInitExceptionsManager from internal to public (may change back later)
- Fixed bugs in CreateFileEx
- Added more exception handling to CopyFileEx and MoveFileEx
- Added some more verbose error messages
- Fixed many bugs in BaseMath
- BaseMath() now takes number of arguments minus 1 instead of number of arguments

Version 4.1
- Added ExceptionsLite functions
	 internal int ElmUnregisterException(int exceptionId)
	 public int ElmUnregisterExceptionP(int exceptionId)
- Slightly more complete documentation

Version 4.0
- Added ExceptionsLite properties
	List<Exception> ExceptionList { get; set; }
- Added ExceptionsLite structs
    public struct Exception
    {
        public string exceptionName { get; set; } // The name of the exception.
        public int exceptionId { get; set; } // The ID of the exception. < 10000 is reserved for the shell.
        public string exceptionMessage { get; set; } // The message of the exception.
        public int exceptionSeverity { get; set; } // The severity. 0 = return from function with code exceptionId, 1 = exit with exitcode exceptionId.
    }
- Added ExceptionsLite functions + ExceptionsLite
	internal void ElmInitExceptionsManager()
	internal int ElmRegisterException(string exceptionName, int exceptionId, string exceptionMessage, int exceptionSeverity)
	public int ElmRegisterExceptionP(string exceptionName, int exceptionId, string exceptionMessage, int exceptionSeverity)
	public int ElmThrowException(int exceptionId)
- Merged classes into unified ShellCore class
- Merged interfaces into Shell.Core and Shell.UI instead of Cosmo.UsefulLibrary.whatever
- Function GetUsefulLibraryVersion() is now GetVersion()
- Merged interfaces into unified IUsefulLibrary interface
- Renamed from Cosmo's Useful Library to ShellCore for TUI shell project
- Added ShellUI
- Added ShellUI core functions
	public void DrawBlankSpace(int amount)
	public int SetConsoleColour(ConsoleColor foregroundColour, ConsoleColor backgroundColour)
- Added Shl.exe - does nothing for now

Version 3.9
- Removed crappy String functions
	public string[] EasySplit(string Split, char[] delimiters)
	public string ReplaceStringSection(string ToReplace, string ReplaceWith)
- Began renaming process to shellcore
- Not sure what else tbh (i don't know lol)
Version 3.0
- Finally renamed the actual assembly from Blaze.API to Cosmo.UsefulLibrary
- Moved GetUsefulLibraryVersion() from Maths to Core
- Added String functions
	public string[] EasySplit(string Split, char[] delimiters)
	public string ReplaceStringSection(string ToReplace, string ReplaceWith)
Version 2.6
- Added FileIO functions
	public bool CreateFileEx(string path, string initialContent=null, bool verifyThatNotAlreadyExist = false)
	public bool DeleteFileEx(string path, bool askUserConsoleOnly = false, string confirmationMessage="Are you sure you want to delete")
	public bool CopyFileEx(string oldpath, string newpath, bool operationSuccessfulMessageConsoleOnly = false, string operationSuccessfulMessage = "The file was successfully copied to")
	public bool MoveFileEx(string oldpath, string newpath, bool operationSuccessfulMessageConsoleOnly = false, string operationSuccessfulMessage = "The file was successfully moved to")
	
Version 2.5

- Added Cosmo.UsefulLibrary.FileIO class (merged in 4.0)
	- Added VerifyExistence(string path)
- Split functions previously in Cosmo.UsefulLibrary into Cosmo.UsefulLibrary.Maths
- Removed replaced functions Add() Subtract() Multiply() Divide() Modulus() Or() And() & Xor() (use BaseMath() instead)

Version 2.0
- Merged Add() Subtract() Multiply() Divide() Modulus() Or() And() & Xor() into BaseMath(int operationId, int numOfArguments, int[] args). 
operationId:
0 = add
1 = subtract
2 = multiply
3 = divide
4 = modulus
5 = and
6 = or
7 = xor
- Old functions still present
- Removed NewStyleFuncTest()

Version 1.9.9.24
- Fixed NewStyleFuncTest()
Version 1.9.9.9
- Added preparation function for 2.0 - NewStyleFuncTest(int numOfArguments, int[] args)
Version 1.9
- Added Math functions:
	Modulus()
	Or()
	And()
	Xor()
Version 1.2
- Added public int[] GetUsefulLibraryVersion()
returns int[3] array where:
int[0] = Major
int[1] = Minor
int[2] = Build
int[3] = Revision

Version 1.1.1
- Added public string EasySplit(string Split, char[] delimiters)
Version 1.1 [LOST]
Added public int Divide(int num, int num2), public int Multiply(int num, int num2), and public int Subtract(int num, int num2) iirc
Version 1.0 [LOST]
public int Add(int num, int num2) Only