7.0 has a LOT of changes, so here they are (as of 7.0.29)
MORE STUFF WILL BE CHANGED!
+ Modified BaseMath():
* Now uses a double instead of an int
* Replaced And, Or, and Xor with Sin, Cos, and Tan
* Replaced operationId with an enum, BaseMathOperation, with 12 values:
public enum BaseMathOperation { Add=0, Subtract=1, Multiply=2, Divide=3, Modulus=4, Sqrt=5, Sin=6, Cos=7, Tan=8, Asin=9, Acos=10, Atan=11 }
+ Added Asin, Acos, and Atan.
+ Added ShellCore method public List<double> Ratio(double n, double x, double y) to calculate a ratio. Returns a list with the quotients.
* Renamed Pow(int x, int y) to Power(int x, int y)
* Merged Sin(), Cos(), and Tan() into BaseMath()
* Added error checking to ShellUI console-related functions
* Added additional error checking to BaseMath
+ Added ShellCore methods *The registry API is not complete yet.*
	public bool WinCreateRegKey(RegistryHive root, string thePath, bool writable = true) - Creates a registry key. Returns true if successful
	public bool WinCreateRegKey(RegistryKey root, string theName, bool writable = true) - Creates a subkey. Returns true if successful.
	public bool WinDeleteRegKey(RegistryHive root, string thePath) - Deletes a registry key. Returns true if successful
	public bool WinDeleteRegKey(RegistryKey key, string theName, bool deltree = false) - Deletes a subkey, and optionally its entire key tree.
	public RegistryKey WinOpenRegKey(RegistryHive root, string thePath, bool writable = true)
	public RegistryKey WinOpenRegKey(RegistryKey key, string theName, bool writable = true) - Opens a subkey. 
	public object WinGetRegValue(string keyPath, string valuePath, object defaultValue) - Gets a registry value. Use var.
	public bool WinSetRegValue(string keyPath, string valuePath, object value, RegistryValueKind type) - Sets a registry value.
	public bool WinDeleteRegValue(RegistryKey theKey, string valueName) - Deletes a registry value. 
	public string[] WinListSubkeys(RegistryKey theKey, string valueName) - Returns a string array holding the children of a key.
	public bool SetFileAttributeEx(string filePath, FileAttributes attribute) - Sets a file attribute to FileAttributes, with error protection.
	public bool SetFileHiddenEx(string filePath) - Alias for SetFileAttributeEx(filePath, FileAttributes.Hidden);
	public bool SetFileReadOnlyEx(string filePath) - Alias for SetFileAttributeEx(filePath, FileAttributes.ReadOnly);
	public bool SetFileTemporaryEx(string filePath) - Alias for SetFileAttributeEx(filePath, FileAttributes.Temporary);
	public bool SetFileSystemEx(string filePath) - Alias for SetFileAttributeEx(filePath, FileAttributes.System);
	public bool RemoveAttributesEx(string filePath) - Alias for SetFileAttributeEx(string filePath, FileAttributes attribute);
+ Added error checking to <Op> handling in ShellUI
+ Modified <Op> handling
+ Made <Op> attributes more flexible - op, Op, operation, and Operation are all accepted instead of just op, and var, Var, variable, and Variable are all accepted instead of just 
- Rewrote GetVersion() and PrintVersion() in both DLLs to get the actual file version instead of a hard-coded value.
+ Added ShellUI Core methods
	public void UiSetWindowTitle(string title)
+ Fixed compile warning
+ Added if statements (crappy)
+ Added easier to use overload for BaseMath - public double BaseMath(BaseMathOperation operationId, double num, double num2) - harder to use one remains and is recommended. 
* Modified messages when booting Shell.
+ Updated the Test Application to require less user input. It requires build 26 or later.